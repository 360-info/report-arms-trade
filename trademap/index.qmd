---
title: "Weapons trade"
subtitle: "And some additional comment here"
page-layout: custom
theme: none
# this includes some default css for the titling, the bootstrap icons (since
# they only come with the bootstrap themes usually), and some extra css for the
# modals 
css:
  - /style/embed.css
  - https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.2/font/bootstrap-icons.css
  - /style/modal.css
  - https://cdn.jsdelivr.net/npm/maplibre-gl@2.1.9/dist/maplibre-gl.css
execute:
  echo: false
resources:
  - style.json
  - /data/sipri-exports-processed.csv
---

{{< include ../_popup-buttons.qmd >}}

```{ojs}
//| label: libraries

r = require.alias({
  maplibregl: "maplibre-gl@2.1.9/dist/maplibre-gl.js",
  h3: {},
  deck: "deck.gl@latest/dist.min.js"
});

maplibregl = r("maplibregl").catch(() => window["maplibregl"]);
deck = r("deck");

// geoparquet + mapbox + deckgl:
// https://observablehq.com/@kylebarron/geoparquet-on-the-web

// maplibre + deckgl:
// https://codepen.io/Pessimistress/pen/ExEoQXL?editors=0010

// animated arcs:
// https://observablehq.com/@yarynam/animated-deck-gl-arcs
// https://symbolixau.github.io/mapdeck/articles/layers.html#animated-arcs

```

```{ojs}
//| label: inputs
viewof selectedYear = Inputs.range([1950, 2021], {
  label: "Since",
  step: 1,
  value: 2021
});
```

```{ojs}
//| label: arc-layer
transferArcs = new deck.MapboxLayer({
  id: "transferArcs",
  type: deck.ArcLayer,
  data: [],
  getSourcePosition:
    d => [Number(d.supplier_lon), Number(d.supplier_lat)],
  getTargetPosition:
    d => [Number(d.recipient_lon), Number(d.recipient_lat)],
  getSourceColor: [0, 32, 64, 102],
  getTargetColor: [0, 128, 255, 204],
  // getWidth: d => d.count // scale?
  getWidth: 2,
})
```

```{ojs}
//| label: map
//| column: screen

/* this is a bit different to regular mapbox/maplibre instantiation
   it lets have the map react to other values in the document, like
   a button or a timer, without reinstantiating!
   (based on https://observablehq.com/@tmcw/using-mapbox-gl-js) */
   
viewof map = {
  let container = html`<div style='height:750px;' />`;

  // Give the container dimensions.
  yield container;

  // Create the \`map\` object with the mapboxgl.Map constructor, referencing
  // the container div
  let map = new maplibregl.Map({
    container,
    center: [-74.5, 40],
    zoom: 3,
    style: "style.json"
  });

  map.on("load", () => {
    container.value = map;
    container.dispatchEvent(new CustomEvent("input"));

    map.addLayer(transferArcs);
  });

  console.log(">>> Map created");
}
```

```{ojs}
//| label: load-and-filter-data
allTransfers = FileAttachment("/data/sipri-exports-processed.csv")
  .csv({ typed: true });

filteredTransfers = allTransfers.filter(t => t.year == selectedYear);

console.log(allTransfers)
console.log(filteredTransfers)
```

```{ojs}
//| label: update-arcs
transferArcs.setProps({ data: filteredTransfers });
```

<!-- share/about popups -->

{{< include ../_popup-dialogs.qmd >}}
