---
title: "Weapons trade"
subtitle: "And some additional comment here"
page-layout: custom
theme: none
# this includes some default css for the titling, the bootstrap icons (since
# they only come with the bootstrap themes usually), and some extra css for the
# modals 
css:
  - /style/embed.css
  - https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.2/font/bootstrap-icons.css
  - /style/modal.css
  - https://cdn.jsdelivr.net/npm/maplibre-gl@2.1.9/dist/maplibre-gl.css
execute:
  echo: false
resources:
  - style.json
  - /data/sipri-exports-processed.csv
---

{{< include ../_popup-buttons.qmd >}}

```{ojs}
// load maplibre-gl. it's a bit finnicky...
maplibregl = require("maplibre-gl@2.1.9/dist/maplibre-gl.js")
  .catch(() => window["maplibregl"]);

deck = require.alias({
  // optional dependencies
  h3: {}
})("deck.gl@latest/dist.min.js");

csvLoader =
  import('https://unpkg.com/@loaders.gl/csv@3.2.6/dist/esm/index.js?module')

// https://deck.gl/docs/api-reference/extensions/data-filter-extension
// deckExtensions = require('@deck.gl/extensions@8.8.6/dist/es5/index.js')
//   .catch(() => window["_interopRequireDefault"]);

// TODO - deckgl? or just maplibre?

// geoparquet + mapbox + deckgl:
// https://observablehq.com/@kylebarron/geoparquet-on-the-web

// maplibre + deckgl:
// https://codepen.io/Pessimistress/pen/ExEoQXL?editors=0010

// animated arcs:
// https://observablehq.com/@yarynam/animated-deck-gl-arcs
// https://symbolixau.github.io/mapdeck/articles/layers.html#animated-arcs
```

```{ojs}
//| column: screen

/* this is a bit different to regular mapbox/maplibre instantiation
   it lets have the map react to other values in the document, like
   a button or a timer, without reinstantiating!
   (based on https://observablehq.com/@tmcw/using-mapbox-gl-js) */
   
viewof map = {
  let container = html`<div style='height:650px;' />`;

  // Give the container dimensions.
  yield container;

  // Create the \`map\` object with the mapboxgl.Map constructor, referencing
  // the container div
  let map = new maplibregl.Map({
    container,
    center: [-74.5, 40],
    zoom: 3,
    style: "style.json"
  });

  console.log(">>> Map created");

  // whe nthe map loads, register it with ojs and add the csv layer
  map.on("load", () => {
    container.value = map;
    container.dispatchEvent(new CustomEvent("input"));
    map.addLayer(new deck.MapboxLayer({
      id: "transfers",
      type: deck.ArcLayer,
      data: "/data/sipri-exports-processed.csv",
      loaders: [csvLoader.CSVLoader],
      loadOptions: {
        csv: {
          delimiter: ",",
          dynamicTyping: true,
          skipEmptyLines: true
        }
      },
      getSourcePosition:
        d => [Number(d.supplier_lon), Number(d.supplier_lat)],
      getTargetPosition:
        d => [Number(d.recipient_lon), Number(d.recipient_lat)],
      getSourceColor: [255, 208, 0, 102],
      getTargetColor: [0, 128, 255, 102],
      // getWidth: d => d.count // scale?
      getWidth: 2
    }));
  });
}
```

<!-- share/about popups -->

{{< include ../_popup-dialogs.qmd >}}
